<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>基础知识 | Academic</title>
    <link>https://Zhang-maozhen.github.io/tag/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <atom:link href="https://Zhang-maozhen.github.io/tag/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/index.xml" rel="self" type="application/rss+xml" />
    <description>基础知识</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 05 Nov 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://Zhang-maozhen.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>基础知识</title>
      <link>https://Zhang-maozhen.github.io/tag/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
    </image>
    
    <item>
      <title>秘密分享</title>
      <link>https://Zhang-maozhen.github.io/post/secreteshare/</link>
      <pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://Zhang-maozhen.github.io/post/secreteshare/</guid>
      <description>&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;h1 id=&#34;秘密共享&#34;&gt;秘密共享&lt;/h1&gt;
&lt;p&gt;Secret Sharing&lt;/p&gt;
&lt;p&gt;有一个秘密，及整数$D$，不希望泄漏。目前有$N$个人，将$D$进行随机切分并分给$N$个人，需要用到信息时就将$N$个部分信息聚合到一起，解密出$D$的值。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这种方案比较脆弱，如果一方不再，那么该秘密无法解密。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了健壮性，设计了一种新的模式，该模式下不需要所有人一起解密，只需要$K$个人，其中$1\le K\le N$。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该方法发表在19179年的《ACM Communication》上，作者是Shamir（RSA发明者之一，图灵奖获得者）&lt;/p&gt;
&lt;p&gt;该方法称为：门限秘密共享方案（threshold secret sharing scheme）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以秘密分享可以分为两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;严格的秘密分享，所有人存在才可解密&lt;/li&gt;
&lt;li&gt;阈值的秘密分享，满足阈值的人数即可解密&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;严格秘密共享&#34;&gt;严格秘密共享&lt;/h2&gt;
&lt;p&gt;Additive Secret Sharing 加法秘密共享&lt;/p&gt;
&lt;p&gt;计算逻辑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户A和用户B作为数据持有方，用户C需要知道用户A和用户B的和，但是A和B不想告知C各自持有的值。&lt;/li&gt;
&lt;li&gt;选择$N$个分片Server（可以是第三方），用户A和用户B各自将持有的$x$和$y$随机切分成$N$份${[&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; ]_1,&amp;hellip;[&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; ]_n}$和${[[y]]_1,&amp;hellip;,[[y]]_n }$，并分配给第三方$S_1,&amp;hellip;,S_n$.&lt;/li&gt;
&lt;li&gt;用户C请求三方计算$N$个分片的和，$[[z]]_1=[&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; ]_1+[[y]]_1,&amp;hellip;,[[z]]_n=[&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; ]_n+[[y]]_n$&lt;/li&gt;
&lt;li&gt;用户C收集$N$个分片参与者的$[[z]]_1,&amp;hellip;[[z]]_n$，并计算求和&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mulplication On Two Additive Shares 使用随机数添加的乘法运算&lt;/p&gt;
&lt;p&gt;协议算法：摘自论文 STR: Secure Computation on Additive Shares Using the Share-Transform-Reveal Strategy&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://mz-pico-1311932519.cos.ap-nanjing.myqcloud.com/image/image-20220816160636303.png&#34; alt=&#34;image-20220816160636303&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;计算逻辑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用户A和用户B作为数据的持有方，用户C需要知道用户A和用户B的数字乘积，但A和B并不想告知C&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择$N$个分片Server（可以是第三方），用户A和用户B各自将持有的$x$和$y$随机切分成$N$份${[&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; ]_1,&amp;hellip;[&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; ]_n}$和${[[y]]_1,&amp;hellip;,[[y]]_n }$，并分配给第三方$S_1,&amp;hellip;,S_n$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要一个随机添加的两个数字$a$和$b$，以及$ab$的乘积$c$，可以由三方提供，用户ABC都不知晓&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择同样的$N$个分片，并且添加的数字$a、b、c$随机切分为$N$份，${[[a]]_1,&amp;hellip;[[a]]_n}$、${[[b]]_1,&amp;hellip;,[[b]]_n }$和${[[c]]_1,&amp;hellip;,[[c]]_n }$，分配给$S_1,S_2,&amp;hellip;,S_n$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对公式$z=x\cdot y$，进行转换&lt;/p&gt;
&lt;p&gt;$z=x\cdot y=(x-a+a)(y-b+b)=(e+a)(f+b)=e\cdot f+e\cdot b+f\cdot a+a\cdot b$&lt;/p&gt;
&lt;p&gt;其中有：$e=x-a、f=y-b$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户C通过参与者分片Server联合计算出$e、f$，这时的$e、f$属于公开数字。&lt;/p&gt;
&lt;p&gt;各个分片计算$[[e]]_i=[[x]]_i-[[a]]_i$，然后用户C进行求和，求解$e$，&lt;/p&gt;
&lt;p&gt;各个分片计算$[[f]]_i=[[y]]_i-[[b]]_i$，然后用户C进行求和，求解$f$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于最终的求解&lt;/p&gt;
&lt;p&gt;$z=xy=e\cdot f+e\cdot b+f\cdot a + a\cdot b$&lt;/p&gt;
&lt;p&gt;这需要各个参与者分片Server计算公开值&lt;/p&gt;
&lt;p&gt;$e\cdot f$，两个公开的数字乘积，无需参与者分片Server的联合计算即可解密数据。&lt;/p&gt;
&lt;p&gt;$e\cdot b$，一个公开的数字乘一个秘密数字，需要每个分片乘以公开数字，即每个参与者计算$[[b]]_i\cdot e$然后用户C进行汇总求和，即可获取解密数据&lt;/p&gt;
&lt;p&gt;$f\cdot a$，同上，计算$[[a]]_i\cdot f$&lt;/p&gt;
&lt;p&gt;$a\cdot b$，即$c$ 的值，由于$c$的值通过秘密分享的方式给参与者分片，只需要通过假发密钥分享即可获取，各个分片的$[[c]]_i$给用户C汇总求和&lt;/p&gt;
&lt;p&gt;最后$C$将获得的上述部分进行累加，就获取了用户A与用户B各自持有数字的乘积，而没有泄露用户A与用户B的具体值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;复杂运算&lt;/p&gt;
&lt;p&gt;从&lt;code&gt;Additive Secret Sharing &lt;/code&gt;和&lt;code&gt;Mulplication On Two Additive Shares&lt;/code&gt;实现了基于&lt;code&gt;SS&lt;/code&gt;的加法与乘法的秘密分享，那么理论山基于加法和乘法可以计算出其他所有运算，包括指数、对数计算。&lt;/p&gt;
&lt;img src=&#34;https://mz-pico-1311932519.cos.ap-nanjing.myqcloud.com/image/image-20220817095442461.png&#34; alt=&#34;image-20220817095442461&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;img src=&#34;https://mz-pico-1311932519.cos.ap-nanjing.myqcloud.com/image/image-20220817095454896.png&#34; alt=&#34;image-20220817095454896&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;img src=&#34;https://mz-pico-1311932519.cos.ap-nanjing.myqcloud.com/image/image-20220817102717985.png&#34; alt=&#34;image-20220817102717985&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;img src=&#34;https://mz-pico-1311932519.cos.ap-nanjing.myqcloud.com/image/image-20220817102728296.png&#34; alt=&#34;image-20220817102728296&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h2 id=&#34;阈值秘密分享&#34;&gt;阈值秘密分享&lt;/h2&gt;
&lt;p&gt;阈值秘密分享的基本思路是，基于秘密分享的便携性与安全性的考量，如果有$n$个秘密分片，我们只需要$K(1\le K\le n)$，将它们手中的信息拼凑起来，就可以获取秘密。&lt;/p&gt;
&lt;p&gt;做到这一点需要考虑的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随机性：挑选的$k$个人，需要时随机挑选的$k$个人，不能是一个固定的选取&lt;/li&gt;
&lt;li&gt;必然性：随机挑选的$k$个人，能够将需要的数字进行解密&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;什么技术可以实现？&lt;/p&gt;
&lt;p&gt;线性代数中，$k$个参与者，相当于$k$个变量，那么需要$k$个方程就可以解出&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;计算逻辑&lt;/p&gt;
&lt;p&gt;秘密数字：$D$&lt;/p&gt;
&lt;p&gt;参与方：$n$个参与者，$D_1,D_2,&amp;hellip;,D_n$&lt;/p&gt;
&lt;p&gt;一个大的素数，$p$，约束这个素数要大于$D$和$n$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先，构造出$n$个方程式，构造公式$D_i=q(i)=\sum_{j=0}^{j=k-1}a_i*i^j$,【来源自文章How to Share a Secret 】&lt;/p&gt;
&lt;p&gt;就是使用多项式操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;公式展开
$$
D_i=q(i)=D+a_1*i+&amp;hellip;+a_{k-1}*i^{k-1}
$$
其中$a_0=D$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;公式举例（假设$k$为3，$n$为10）&lt;/p&gt;
&lt;p&gt;$D_1=q(1)=D+a_1+a_2,其中a_0=D$&lt;/p&gt;
&lt;p&gt;$D_2=q(2)=D+2a_1+4a_2,其中a_0=D$&lt;/p&gt;
&lt;p&gt;​                                   &amp;hellip;&lt;/p&gt;
&lt;p&gt;$D_{10}=q(10)=D+10a_1+100a_2,其中a_0=D$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后，目前的方程组里面，还有$a_1\sim a_{k-1}$的$K-1$个变量，那么这几个变量如何获取呢&lt;/p&gt;
&lt;p&gt;根据Adi Shamir在ACM发布的《How to share a Secret》的描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The coefficients $a_1,&amp;hellip;,a_{k-1}$ in $q(x)$ are randomly chosen from a uniform distribution over the integers in $[0, p)$,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即在$[0,p)$均匀分布的范围中随机获取。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原始文章中对$D_1,D_2,..,D_n$进行了约束是大素数的取模，这个大素数$p$的作用更多是控制我们选择$a_1\sim a_{k-1}$的大小，防止数据过于膨胀(唯一解的问题，在构造的时候基本可以规避【可自行证明，注：系数行列式不等于零】)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后，将这$n$个方程划给$n$个参与者。需要计算时，只需要将$k$个方程获取进行联合计算就可以计算出$a$，也就是秘密$D。$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;加密&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;输入&lt;/p&gt;
&lt;p&gt;秘密数字：$D=88$&lt;/p&gt;
&lt;p&gt;参与方：$10个，D_1,D_2,&amp;hellip;,D_10$&lt;/p&gt;
&lt;p&gt;大素数：$p=991$&lt;/p&gt;
&lt;p&gt;解密阈值：$k=3$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加密逻辑&lt;/p&gt;
&lt;p&gt;生成方程组：&lt;/p&gt;
&lt;p&gt;$D_1=q(1)=88+a_1+a_2$&lt;/p&gt;
&lt;p&gt;$D_2=q(2)=88+2a_1+4a_2$&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;$D_{10}=q(10)=88+10a_a+100a_2$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于素数生成$a_1\sim a_{10}$的值，如设定$a_1=1,a_2=2$，即得到$D_1,&amp;hellip;,D_{10}$&lt;/p&gt;
&lt;p&gt;$D_1=91,D_2=98,&amp;hellip;,D_{10}=298$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可见此时$D_i，i\le n$均小于素数说991，符合预设，将这10个方程分布发不到10个参与者分片Server&lt;/p&gt;
&lt;p&gt;【分片仅知道$D_i$的值和方程分布】&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解密&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;随机三个参与者，拿出方程组成方程组进行解密，如1，2，10&lt;/p&gt;
&lt;p&gt;$D_1=q(1)=D+a_1+a_2=91$&lt;/p&gt;
&lt;p&gt;$D_2=q(2)=D+2a_1+4a_2=98$&lt;/p&gt;
&lt;p&gt;$D_{10}=q(10)=D+10a_a+100a_2=298$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对方程组求解，得到$D,a_1,a_2$的值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
